1.
MethodType
用MethodType将方法绑定到类，并不是将这个方法直接写到类内部，而是在内存中创建一个link指向外部的方法，在创建实例的时候这个link也会被复制。
但是，给一个实例绑定的方法，对另一个实例是不起作用的

2.
python的单、双下划线：
我们经常看到方法或者属性前面加了单下划线，并认为它表示该方法或者属性是该类型（Python和Golang一样，不光类可以有方法，很多类型甚至基本类型也可以定义方法）的私有方法或属性。但其实在Python中不存在真正意义上的私有方法或者属性，前面加单下划线_只是表示你不应该去访问这个方法或者属性，因为它不是API的一部分。

之前很多人跟我说Python中双下划线开头表示私有，我在很多地方也见到这样的说法。这样理解可能也不能说错，但这不是Python设计双下划线开头的初衷和目的，Python设计此的真正目的仅仅是为了避免子类覆盖父类的方法。

开头结尾双下划线
一般来说像__this__这种开头结尾都加双下划线的方法表示这是Python自己调用的，你不要调用。比如我们可以调用len()函数来求长度，其实它后台是调用了__len__()方法。一般我们应该使用len，而不是直接使用__len__()
len（a）
a.__len__（）

结论
* 		使用单下划线(_one_underline)开头表示方法不是API的一部分，不要直接访问（虽然语法上访问也没有什么问题）。
* 		使用双下划线开头(__two_underlines)开头表示子类不能覆写该方法。除非你真的知道你在干什么，否则不要使用这种方式。
* 		当你想让自己定义的对象也可以像Python内置的对象一样使用Python内置的一些函数或操作符（比如len、add、+、-、==等）时，你可以定义该类方法。
* 		当然还有些属性只在末尾加了但下划线，这仅仅是为了避免我们起的一些名字和Python保留关键字冲突，没有特殊含义。

3.
定制类
__str__
__repr__
__iter__
__next__
__getitem__
__getattr__ 
4.
list有个神奇的切片方法：
>>> list(range(100))[5:10]
[5, 6, 7, 8, 9]