1.
返回函数
函数作为返回值：
高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回。
通常情况下，求和的函数是这样定义的：
def calc_sum(*args):
    ax = 0
    for n in args:
        ax = ax + n
    return ax

但是，如果不需要立刻求和，而是在后面的代码中，根据需要再计算怎么办？可以不返回求和的结果，而是返回求和的函数：
def lazy_sum(*args):
    def sum():
        ax = 0
        for n in args:
            ax = ax + n
        return ax
    return sum

当我们调用lazy_sum()时，返回的并不是求和结果，而是求和函数：

>>> f = lazy_sum(1, 3, 5, 7, 9)
>>> f
<function lazy_sum.<locals>.sum at 0x101c6ed90>
#此时f==sum
调用函数f时，才真正计算求和的结果：
 
>>> f()  #此时f()=sum()
25

2.
闭包函数
返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。

3.
做作业时 new items
python引用变量的顺序： 当前作用域局部变量->外层作用域变量->当前模块中的全局变量->python内置变量 。
                    global和nonlocal的作用域
global关键字用来在函数或其他局部作用域中使用全局变量。但是如果不修改全局变量也可以不使用global关键字。
如果内部函数有引用外部函数的同名变量或者全局变量,并且对这个变量有修改.那么python会认为它是一个局部变量
nonlocal关键字用来在函数或其他作用域中使用外层(非全局)变量。

4.
匿名函数lambda
匿名函数有个限制，就是只能有一个表达式，不用写return，返回值就是该表达式的结果。
